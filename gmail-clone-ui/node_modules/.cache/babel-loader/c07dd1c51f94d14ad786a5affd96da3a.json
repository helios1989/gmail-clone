{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\nconst initialState = {\n  value: 0,\n  status: 'idle'\n};\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: state => {\n      console.log(state); // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  }\n});\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = counterSlice.actions; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n\nexport const selectCount = state => state.counter.value; // We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n\nexport const incrementIfOdd = amount => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\nexport default counterSlice.reducer;","map":{"version":3,"sources":["/Users/vergelbarit/Documents/gmail-clone/src/features/counter/counterSlice.js"],"names":["createAsyncThunk","createSlice","fetchCount","initialState","value","status","counterSlice","name","reducers","increment","state","console","log","decrement","incrementByAmount","action","payload","actions","selectCount","counter","incrementIfOdd","amount","dispatch","getState","currentValue","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,CADY;AAEnBC,EAAAA,MAAM,EAAE;AAFW,CAArB;AAOA,OAAO,MAAMC,YAAY,GAAGL,WAAW,CAAC;AACtCM,EAAAA,IAAI,EAAE,SADgC;AAEtCJ,EAAAA,YAFsC;AAGtC;AACAK,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAGC,KAAD,IAAW;AAEpBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAFoB,CAGpB;AACA;AACA;AACA;;AACAA,MAAAA,KAAK,CAACN,KAAN,IAAe,CAAf;AACD,KATO;AAURS,IAAAA,SAAS,EAAGH,KAAD,IAAW;AACpBA,MAAAA,KAAK,CAACN,KAAN,IAAe,CAAf;AACD,KAZO;AAaR;AACAU,IAAAA,iBAAiB,EAAE,CAACJ,KAAD,EAAQK,MAAR,KAAmB;AACpCL,MAAAA,KAAK,CAACN,KAAN,IAAeW,MAAM,CAACC,OAAtB;AACD;AAhBO;AAJ4B,CAAD,CAAhC;AAwBP,OAAO,MAAM;AAAEP,EAAAA,SAAF;AAAaI,EAAAA,SAAb;AAAwBC,EAAAA;AAAxB,IAA8CR,YAAY,CAACW,OAAjE,C,CAEP;AACA;AACA;;AAEA,OAAO,MAAMC,WAAW,GAAIR,KAAD,IAAWA,KAAK,CAACS,OAAN,CAAcf,KAA7C,C,CAEP;AACA;;AACA,OAAO,MAAMgB,cAAc,GAAIC,MAAD,IAAY,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAChE,QAAMC,YAAY,GAAGN,WAAW,CAACK,QAAQ,EAAT,CAAhC;;AACA,MAAIC,YAAY,GAAG,CAAf,KAAqB,CAAzB,EAA4B;AAC1BF,IAAAA,QAAQ,CAACR,iBAAiB,CAACO,MAAD,CAAlB,CAAR;AACD;AACF,CALM;AAOP,eAAef,YAAY,CAACmB,OAA5B","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n\n      console.log(state);\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  }\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}